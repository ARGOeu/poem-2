# Generated by Django 2.2.5 on 2019-10-10 10:42

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('poem_super_admin', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Aggregation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the Aggregation profile.', max_length=128)),
                ('apiid', models.CharField(help_text='WEB-API ID of Aggregation profile', max_length=128)),
                ('groupname', models.CharField(default='', max_length=128)),
            ],
            options={
                'permissions': (('aggregationsown', 'Read/Write/Modify'),),
            },
        ),
        migrations.CreateModel(
            name='GroupOfAggregations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True, verbose_name='name')),
                ('aggregations', models.ManyToManyField(blank=True, to='poem.Aggregation')),
                ('permissions', models.ManyToManyField(blank=True, to='auth.Permission', verbose_name='permissions')),
            ],
            options={
                'verbose_name': 'Group of aggregations',
                'verbose_name_plural': 'Groups of aggregations',
            },
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='GroupOfMetricProfiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Group of metric profiles',
                'verbose_name_plural': 'Groups of metric profiles',
            },
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='GroupOfMetrics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Group of metrics',
                'verbose_name_plural': 'Groups of metrics',
            },
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='MetricInstance',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('service_flavour', models.CharField(max_length=128)),
                ('metric', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='MetricProfiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the Metric profile.', max_length=128)),
                ('apiid', models.CharField(help_text='WEB-API ID of Metric profile', max_length=128)),
                ('groupname', models.CharField(default='', max_length=128)),
            ],
            options={
                'permissions': (('metricprofilessown', 'Read/Write/Modify'),),
            },
        ),
        migrations.CreateModel(
            name='Metrics',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'permissions': (('metricsown', 'Read/Write/Modify'),),
            },
        ),
        migrations.CreateModel(
            name='MetricType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.CharField(max_length=1024, primary_key=True, serialize=False)),
                ('service_id', models.CharField(max_length=1024)),
                ('service_name', models.CharField(max_length=128)),
                ('service_category', models.CharField(max_length=1024)),
                ('service_version', models.CharField(max_length=1024)),
                ('service_type', models.CharField(max_length=1024)),
                ('component_version', models.CharField(max_length=1024)),
                ('component_name', models.CharField(max_length=1024)),
                ('visible_to_marketplace', models.BooleanField(default=False)),
                ('in_catalogue', models.BooleanField(default=False)),
                ('external_service', models.BooleanField(default=False)),
                ('internal_service', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceFlavour',
            fields=[
                ('name', models.CharField(max_length=128, primary_key=True, serialize=False, verbose_name='Service flavour')),
                ('description', models.CharField(blank=True, max_length=1024, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(blank=True, max_length=512, null=True, verbose_name='distinguishedName')),
                ('egiid', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='eduPersonUniqueId')),
                ('displayname', models.CharField(blank=True, max_length=30, null=True, verbose_name='displayName')),
                ('groupsofaggregations', models.ManyToManyField(blank=True, help_text='The groups of aggregations that user will control', related_name='user_set', related_query_name='user', to='poem.GroupOfAggregations', verbose_name='groups of aggregations')),
                ('groupsofmetricprofiles', models.ManyToManyField(blank=True, help_text='The groups of metric profiles that user will control.', related_name='user_set', related_query_name='user', to='poem.GroupOfMetricProfiles', verbose_name='groups of profiles')),
                ('groupsofmetrics', models.ManyToManyField(blank=True, help_text='The groups of metrics that user will control', related_name='user_set', related_query_name='user', to='poem.GroupOfMetrics', verbose_name='groups of metrics')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('probeversion', models.CharField(max_length=128)),
                ('parent', models.CharField(max_length=128)),
                ('probeexecutable', models.CharField(max_length=128)),
                ('config', models.CharField(max_length=1024)),
                ('attribute', models.CharField(max_length=1024)),
                ('dependancy', models.CharField(max_length=1024)),
                ('flags', models.CharField(max_length=1024)),
                ('files', models.CharField(max_length=1024)),
                ('parameter', models.CharField(max_length=1024)),
                ('fileparameter', models.CharField(max_length=1024)),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='poem.GroupOfMetrics')),
                ('mtype', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poem.MetricType')),
                ('probekey', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='poem_super_admin.History')),
            ],
            options={
                'verbose_name': 'Metric',
            },
        ),
        migrations.AddField(
            model_name='groupofmetrics',
            name='metrics',
            field=models.ManyToManyField(blank=True, to='poem.Metrics'),
        ),
        migrations.AddField(
            model_name='groupofmetrics',
            name='permissions',
            field=models.ManyToManyField(blank=True, to='auth.Permission', verbose_name='permissions'),
        ),
        migrations.AddField(
            model_name='groupofmetricprofiles',
            name='metricprofiles',
            field=models.ManyToManyField(blank=True, to='poem.MetricProfiles'),
        ),
        migrations.AddField(
            model_name='groupofmetricprofiles',
            name='permissions',
            field=models.ManyToManyField(blank=True, to='auth.Permission', verbose_name='permissions'),
        ),
    ]
